name: Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  unit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.5

    - name: Unit Test
      run: go test -v ./... -tags=unit

  integration:
    runs-on: ubuntu-latest
    container: golang:1.16.5
    services:
      db:
        image: postgres:13.2
        env:
          POSTGRES_USER: cqrs
          POSTGRES_PASSWORD: cqrs
          POSTGRES_DB: cqrs
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2

      - name: Integration test
        run: go test -v ./...

  system:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: "development"
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_USER: "cqrs"
      DB_NAME: "cqrs"
      DB_PASS: "cqrs"
      SECRET_KEY: "secret"
      MIGRATIONS: "~/work/cqrs/cqrs/_example/migrations"
    services:
      db:
        image: postgres:13.2
        env:
          POSTGRES_DB: cqrs
          POSTGRES_USER: cqrs
          POSTGRES_PASSWORD: cqrs
    steps:
    - uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.5

    - name: Render
      run: |
        rm -rf ./_example
        cd gen; go run . init -module=example -root=../_example -example=true
        cd ../_example; go mod tidy && go test ./...
